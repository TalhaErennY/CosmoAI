# -*- coding: utf-8 -*-
"""DataTest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EqLXr-_FxvzQIgITF9WFbaiU8g5KbKWz
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def filter_invalid(data, columns, invalid_value=-9999):
    """Geçersiz değerleri temizler."""
    for col in columns:
        data = data[data[col] != invalid_value]
    return data

def sliding_window_averages(data, columns, step=0.001, sample_size=100):
    """Redshift dilimlerinde en yakın 100 örneğin ortalamasını alır."""
    z_min = data['redshift'].min()
    z_max = data['redshift'].max()
    bins = np.arange(z_min, z_max + step, step)

    averaged_data = []
    for center in bins:
        distances = np.abs(data['redshift'] - center)
        nearest_indices = distances.nsmallest(sample_size).index
        nearest_samples = data.loc[nearest_indices]
        mean_values = nearest_samples[columns].mean()
        averaged_data.append({'redshift': center, **mean_values.to_dict()})

    return pd.DataFrame(averaged_data)

# --- Quasar Verileri ---
quasar_files = ["quasar_00_10.csv", "quasar_10_20.csv", "quasar_20_100.csv"]
quasar_data = pd.concat([pd.read_csv(f) for f in quasar_files], ignore_index=True)
quasar_data = filter_invalid(quasar_data, ['u', 'g', 'r', 'i', 'z'])
quasar_avg = sliding_window_averages(quasar_data, ['u', 'g', 'r', 'i', 'z'])

# --- Galaxy Verileri ---
galaxy_files = [
    "galaxy_00_01.csv", "galaxy_02_03.csv", "galaxy_03_04.csv", "galaxy_04_05.csv",
    "galaxy_05_06.csv", "galaxy_06_07.csv", "galaxy_07_08.csv", "galaxy_08_09.csv",
    "galaxy_09_10.csv", "galaxy_10_100.csv"
]
galaxy_data = pd.concat([pd.read_csv(f) for f in galaxy_files], ignore_index=True)
galaxy_data = filter_invalid(galaxy_data, ['u', 'g', 'r', 'i', 'z'])
galaxy_avg = sliding_window_averages(galaxy_data, ['u', 'g', 'r', 'i', 'z'])

# --- Quasar Ortalama Grafiği ---
plt.figure(figsize=(10, 6))
plt.plot(quasar_avg['redshift'], quasar_avg['u'], label='u')
plt.plot(quasar_avg['redshift'], quasar_avg['g'], label='g')
plt.plot(quasar_avg['redshift'], quasar_avg['r'], label='r')
plt.plot(quasar_avg['redshift'], quasar_avg['i'], label='i')
plt.plot(quasar_avg['redshift'], quasar_avg['z'], label='z')
plt.xlabel('Redshift (z)')
plt.ylabel('Average Magnitude')
plt.title('Quasar Sliding Window Average Magnitude vs Redshift')
plt.legend()
plt.grid(True)
plt.show()

# --- Galaxy Ortalama Grafiği ---
plt.figure(figsize=(10, 6))
plt.plot(galaxy_avg['redshift'], galaxy_avg['u'], label='u')
plt.plot(galaxy_avg['redshift'], galaxy_avg['g'], label='g')
plt.plot(galaxy_avg['redshift'], galaxy_avg['r'], label='r')
plt.plot(galaxy_avg['redshift'], galaxy_avg['i'], label='i')
plt.plot(galaxy_avg['redshift'], galaxy_avg['z'], label='z')
plt.xlabel('Redshift (z)')
plt.ylabel('Average Magnitude')
plt.title('Galaxy Sliding Window Average Magnitude vs Redshift')
plt.legend()
plt.grid(True)
plt.show()

# --- Pantheon+SH0ES Verileri ---
pantheon_file = "Pantheon+SH0ES_ml_nodup.xlsx"
pantheon_data = pd.read_excel(pantheon_file)

# --- Pantheon+SH0ES Grafiği ---
plt.figure(figsize=(10, 6))
plt.scatter(pantheon_data['zCMB'], pantheon_data['MU_SH0ES'], label='MU_SH0ES', s=10)
plt.scatter(pantheon_data['zCMB'], pantheon_data['m_b_corr'], label='m_b_corr', s=10)
plt.xlabel('zCMB')
plt.ylabel('Magnitude / Distance Modulus')
plt.title('Pantheon+SH0ES: MU_SH0ES and m_b_corr vs zCMB')
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def filter_invalid(data, columns, invalid_value=-9999):
    for col in columns:
        data = data[data[col] != invalid_value]
    return data

def binned_closest_averages(data, columns, bin_width=0.05, max_distance=0.004, max_samples=100):
    z_min = data['redshift'].min()
    z_max = data['redshift'].max()
    bins = np.arange(z_min, z_max + bin_width, bin_width)

    results = []
    for center in bins:
        distances = np.abs(data['redshift'] - center)
        # 0.004 mesafeye kadar filtrele
        within_limit = data[distances <= max_distance]
        if within_limit.empty:
            continue
        # En yakın 100 örneği seç
        nearest_indices = distances[within_limit.index].nsmallest(max_samples).index
        nearest_samples = data.loc[nearest_indices]
        mean_values = nearest_samples[columns].mean()
        count = len(nearest_samples)
        results.append({'redshift_center': center, 'count': count, **mean_values.to_dict()})
    return pd.DataFrame(results)

# --- Quasar Verileri ---
quasar_files = ["quasar_00_10.csv", "quasar_10_20.csv", "quasar_20_100.csv"]
quasar_data = pd.concat([pd.read_csv(f) for f in quasar_files], ignore_index=True)
quasar_data = filter_invalid(quasar_data, ['u', 'g', 'r', 'i', 'z'])
quasar_avg = binned_closest_averages(quasar_data, ['u', 'g', 'r', 'i', 'z'])

# --- Galaxy Verileri ---
galaxy_files = [
    "galaxy_00_01.csv", "galaxy_02_03.csv", "galaxy_03_04.csv", "galaxy_04_05.csv",
    "galaxy_05_06.csv", "galaxy_06_07.csv", "galaxy_07_08.csv", "galaxy_08_09.csv",
    "galaxy_09_10.csv", "galaxy_10_100.csv"
]
galaxy_data = pd.concat([pd.read_csv(f) for f in galaxy_files], ignore_index=True)
galaxy_data = filter_invalid(galaxy_data, ['u', 'g', 'r', 'i', 'z'])
galaxy_avg = binned_closest_averages(galaxy_data, ['u', 'g', 'r', 'i', 'z'])

# --- Özet Tablo ---
summary = pd.merge(
    quasar_avg[['redshift_center', 'count']],
    galaxy_avg[['redshift_center', 'count']],
    on='redshift_center', how='outer', suffixes=('_quasar', '_galaxy')
).sort_values('redshift_center')

print("\nBinned Sample Counts (Quasar and Galaxy):")
print(summary)

# --- Quasar Ortalama Grafiği ---
plt.figure(figsize=(10, 6))
plt.plot(quasar_avg['redshift_center'], quasar_avg['u'], label='u')
plt.plot(quasar_avg['redshift_center'], quasar_avg['g'], label='g')
plt.plot(quasar_avg['redshift_center'], quasar_avg['r'], label='r')
plt.plot(quasar_avg['redshift_center'], quasar_avg['i'], label='i')
plt.plot(quasar_avg['redshift_center'], quasar_avg['z'], label='z')
plt.xlabel('Redshift Center (z)')
plt.ylabel('Average Magnitude')
plt.title('Quasar Binned Closest 100 Average Magnitude vs Redshift')
plt.legend()
plt.grid(True)
plt.show()

# --- Galaxy Ortalama Grafiği ---
plt.figure(figsize=(10, 6))
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['u'], label='u')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['g'], label='g')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['r'], label='r')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['i'], label='i')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['z'], label='z')
plt.xlabel('Redshift Center (z)')
plt.ylabel('Average Magnitude')
plt.title('Galaxy Binned Closest 100 Average Magnitude vs Redshift')
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Geçersiz değerleri temizleyen fonksiyon
def filter_invalid(data, columns, invalid_value=-9999):
    for col in columns:
        data = data[data[col] != invalid_value]
    return data

# Belirtilen kurallarla örnekleme ve ortalama hesaplayan fonksiyon
def binned_closest_averages(data, columns, bin_width=0.05, max_distance=0.004, max_samples=100):
    z_min = data['redshift'].min()
    z_max = data['redshift'].max()
    bins = np.arange(z_min, z_max + bin_width, bin_width)

    results = []
    for center in bins:
        distances = np.abs(data['redshift'] - center)
        within_limit = data[distances <= max_distance]
        if within_limit.empty:
            continue
        nearest_indices = distances[within_limit.index].nsmallest(max_samples).index
        nearest_samples = data.loc[nearest_indices]
        mean_values = nearest_samples[columns].mean()
        count = len(nearest_samples)
        results.append({'redshift_center': center, 'count': count, **mean_values.to_dict()})
    return pd.DataFrame(results)

# --- Quasar Verileri ---
quasar_files = ["quasar_00_10.csv", "quasar_10_20.csv", "quasar_20_100.csv"]
quasar_data = pd.concat([pd.read_csv(f) for f in quasar_files], ignore_index=True)
quasar_data = filter_invalid(quasar_data, ['u', 'g', 'r', 'i', 'z'])
quasar_avg = binned_closest_averages(quasar_data, ['u', 'g', 'r', 'i', 'z'])

# --- Galaxy Verileri ---
galaxy_files = [
    "galaxy_00_01.csv", "galaxy_02_03.csv", "galaxy_03_04.csv", "galaxy_04_05.csv",
    "galaxy_05_06.csv", "galaxy_06_07.csv", "galaxy_07_08.csv", "galaxy_08_09.csv",
    "galaxy_09_10.csv", "galaxy_10_100.csv"
]
galaxy_data = pd.concat([pd.read_csv(f) for f in galaxy_files], ignore_index=True)
galaxy_data = filter_invalid(galaxy_data, ['u', 'g', 'r', 'i', 'z'])
galaxy_avg = binned_closest_averages(galaxy_data, ['u', 'g', 'r', 'i', 'z'])

# --- Özet Tablosu ---
summary = pd.merge(
    quasar_avg[['redshift_center', 'count']],
    galaxy_avg[['redshift_center', 'count']],
    on='redshift_center', how='outer', suffixes=('_quasar', '_galaxy')
).sort_values('redshift_center')

# --- Konsolda Tam Görüntüleme ---
with pd.option_context('display.max_rows', None, 'display.max_columns', None):
    print("\nBinned Sample Counts (Quasar and Galaxy):")
    print(summary)

# --- Excel Çıktısı ---
output_file = "binned_sample_counts.xlsx"
summary.to_excel(output_file, index=False)

print(f"\nTablo başarıyla '{output_file}' dosyasına kaydedildi.")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def filter_invalid(data, columns, invalid_value=-9999):
    for col in columns:
        data = data[data[col] != invalid_value]
    return data

def binned_closest_averages_fixed_bins(data, columns, bins, max_distance=0.0004, max_samples=100):
    results = []
    for center in bins:
        distances = np.abs(data['redshift'] - center)
        within_limit = data[distances <= max_distance]
        if within_limit.empty:
            continue
        nearest_indices = distances[within_limit.index].nsmallest(max_samples).index
        nearest_samples = data.loc[nearest_indices]
        mean_values = nearest_samples[columns].mean()
        count = len(nearest_samples)
        results.append({'redshift_center': center, 'count': count, **mean_values.to_dict()})
    return pd.DataFrame(results)

# --- Quasar Verileri ---
quasar_files = ["quasar_00_10.csv", "quasar_10_20.csv", "quasar_20_100.csv"]
quasar_data = pd.concat([pd.read_csv(f) for f in quasar_files], ignore_index=True)
quasar_data = filter_invalid(quasar_data, ['u', 'g', 'r', 'i', 'z'])

# --- Galaxy Verileri ---
galaxy_files = [
    "galaxy_00_01.csv", "galaxy_02_03.csv", "galaxy_03_04.csv", "galaxy_04_05.csv",
    "galaxy_05_06.csv", "galaxy_06_07.csv", "galaxy_07_08.csv", "galaxy_08_09.csv",
    "galaxy_09_10.csv", "galaxy_10_100.csv"
]
galaxy_data = pd.concat([pd.read_csv(f) for f in galaxy_files], ignore_index=True)
galaxy_data = filter_invalid(galaxy_data, ['u', 'g', 'r', 'i', 'z'])

# --- Ortak Binler Tanımlama ---
bin_width = 0.05
z_min = 0.0
z_max = max(quasar_data['redshift'].max(), galaxy_data['redshift'].max())
common_bins = np.arange(z_min, z_max + bin_width, bin_width)

# --- Ortalamaları Hesaplama ---
quasar_avg = binned_closest_averages_fixed_bins(quasar_data, ['u', 'g', 'r', 'i', 'z'], common_bins)
galaxy_avg = binned_closest_averages_fixed_bins(galaxy_data, ['u', 'g', 'r', 'i', 'z'], common_bins)

# --- Özet Tablosu ---
summary = pd.merge(
    quasar_avg[['redshift_center', 'count']],
    galaxy_avg[['redshift_center', 'count']],
    on='redshift_center', how='outer', suffixes=('_quasar', '_galaxy')
).sort_values('redshift_center')

# --- Konsolda Tam Tablo Gösterimi ---
with pd.option_context('display.max_rows', None, 'display.max_columns', None):
    print("\nBinned Sample Counts (Quasar and Galaxy):")
    print(summary)

# --- Excel Kaydetme ---
output_file = "binned_sample_counts_2.xlsx"
summary.to_excel(output_file, index=False)
print(f"\nTablo başarıyla '{output_file}' dosyasına kaydedildi.")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def filter_invalid(data, columns, invalid_value=-9999):
    for col in columns:
        data = data[data[col] != invalid_value]
    return data

def binned_closest_averages_fixed_bins(data, columns, bins, max_distance=0.0004, max_samples=100):
    results = []
    for center in bins:
        distances = np.abs(data['redshift'] - center)
        within_limit = data[distances <= max_distance]
        if within_limit.empty:
            continue
        nearest_indices = distances[within_limit.index].nsmallest(max_samples).index
        nearest_samples = data.loc[nearest_indices]
        mean_values = nearest_samples[columns].mean()
        count = len(nearest_samples)
        results.append({'redshift_center': center, 'count': count, **mean_values.to_dict()})
    return pd.DataFrame(results)

# --- Quasar Verileri ---
quasar_files = ["quasar_00_10.csv", "quasar_10_20.csv", "quasar_20_100.csv"]
quasar_data = pd.concat([pd.read_csv(f) for f in quasar_files], ignore_index=True)
quasar_data = filter_invalid(quasar_data, ['u', 'g', 'r', 'i', 'z'])

# --- Galaxy Verileri ---
galaxy_files = [
    "galaxy_00_01.csv", "galaxy_02_03.csv", "galaxy_03_04.csv", "galaxy_04_05.csv",
    "galaxy_05_06.csv", "galaxy_06_07.csv", "galaxy_07_08.csv", "galaxy_08_09.csv",
    "galaxy_09_10.csv", "galaxy_10_100.csv"
]
galaxy_data = pd.concat([pd.read_csv(f) for f in galaxy_files], ignore_index=True)
galaxy_data = filter_invalid(galaxy_data, ['u', 'g', 'r', 'i', 'z'])

# --- Ortak Binler ---
bin_width = 0.05
z_min = 0.0
z_max = max(quasar_data['redshift'].max(), galaxy_data['redshift'].max())
common_bins = np.arange(z_min, z_max + bin_width, bin_width)

# --- Filtrelenmiş Ortalamalar ---
quasar_avg = binned_closest_averages_fixed_bins(quasar_data, ['u', 'g', 'r', 'i', 'z'], common_bins)
galaxy_avg = binned_closest_averages_fixed_bins(galaxy_data, ['u', 'g', 'r', 'i', 'z'], common_bins)

# --- Pantheon+SH0ES Verisi ---
pantheon_data = pd.read_excel("Pantheon+SH0ES_ml_nodup.xlsx")

# --- Özet Tablo ---
summary = pd.merge(
    quasar_avg[['redshift_center', 'count']],
    galaxy_avg[['redshift_center', 'count']],
    on='redshift_center', how='outer', suffixes=('_quasar', '_galaxy')
).sort_values('redshift_center')

# --- Konsolda Gösterim ---
with pd.option_context('display.max_rows', None, 'display.max_columns', None):
    print("\nBinned Sample Counts (Quasar and Galaxy):")
    print(summary)

# --- Excel Kaydetme ---
output_file = "binned_sample_counts.xlsx"
summary.to_excel(output_file, index=False)
print(f"\nTablo başarıyla '{output_file}' dosyasına kaydedildi.")

# --- Quasar ugriz Grafiği ---
plt.figure(figsize=(10, 6))
plt.plot(quasar_avg['redshift_center'], quasar_avg['u'], label='u')
plt.plot(quasar_avg['redshift_center'], quasar_avg['g'], label='g')
plt.plot(quasar_avg['redshift_center'], quasar_avg['r'], label='r')
plt.plot(quasar_avg['redshift_center'], quasar_avg['i'], label='i')
plt.plot(quasar_avg['redshift_center'], quasar_avg['z'], label='z')
plt.xlabel('Redshift Center (z)')
plt.ylabel('Average Magnitude')
plt.title('Filtered Quasar ugriz vs Redshift')
plt.legend()
plt.grid(True)
plt.show()

# --- Galaxy ugriz Grafiği ---
plt.figure(figsize=(10, 6))
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['u'], label='u')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['g'], label='g')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['r'], label='r')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['i'], label='i')
plt.plot(galaxy_avg['redshift_center'], galaxy_avg['z'], label='z')
plt.xlabel('Redshift Center (z)')
plt.ylabel('Average Magnitude')
plt.title('Filtered Galaxy ugriz vs Redshift')
plt.legend()
plt.grid(True)
plt.show()

# --- Pantheon+SH0ES MU_SH0ES ve m_b_corr Grafiği ---
plt.figure(figsize=(10, 6))
plt.scatter(pantheon_data['zCMB'], pantheon_data['MU_SH0ES'], label='MU_SH0ES', s=10)
plt.scatter(pantheon_data['zCMB'], pantheon_data['m_b_corr'], label='m_b_corr', s=10)
plt.xlabel('zCMB')
plt.ylabel('Magnitude / Distance Modulus')
plt.title('Pantheon+SH0ES: MU_SH0ES and m_b_corr vs zCMB')
plt.legend()
plt.grid(True)
plt.show()

!pip install astropy

import numpy as np
import pandas as pd
from astropy.cosmology import FlatLambdaCDM
import matplotlib.pyplot as plt

# Pantheon+SH0ES parametreleri
H0 = 73.04  # Hubble constant
Om0 = 0.27  # Matter density parameter

# Kozmoloji modeli
cosmo = FlatLambdaCDM(H0=H0, Om0=Om0)

# Simüle z değerleri (2.5 - 7.0 arası)
simulated_z = np.arange(2.5, 7.0, 0.05)

# Işık mesafesi (Mpc) ve mesafe modülü (mu)
luminosity_distances = cosmo.luminosity_distance(simulated_z).value  # Mpc cinsinden
mu_shoes_simulated = 5 * np.log10(luminosity_distances * 1e6) - 5  # parsek cinsinden

# Sonuçları DataFrame olarak sakla
simulated_df = pd.DataFrame({
    'simulated_z': simulated_z,
    'simulated_mu_shoes': mu_shoes_simulated
})

# Sonuçları göster
print(simulated_df)

# Grafikle göster
plt.figure(figsize=(10, 5))
plt.plot(simulated_df['simulated_z'], simulated_df['simulated_mu_shoes'], marker='o', linestyle='-', color='green')
plt.xlabel('Redshift (z)')
plt.ylabel('Simulated MU_SH0ES')
plt.title('Simulated MU_SH0ES Based on Pantheon+SH0ES Cosmology')
plt.grid(True)
plt.show()