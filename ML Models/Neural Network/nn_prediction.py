# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zfqctpdfG-90yb_NN0PFv8DGpqwzszs2
"""

# 📦 Gerekli Kütüphaneler
!pip install -q tensorflow scikit-learn matplotlib openpyxl joblib tqdm

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import load_model
import joblib
from tqdm import tqdm
import tensorflow.keras.backend as K

# 🧠 MSE (eğer eğitimde özel tanımlıysa)
def mse(y_true, y_pred):
    return K.mean(K.square(y_true - y_pred))

# 🔹 Quasar verilerini oku
files = [
    "quasar_00_10.csv",
    "quasar_10_20.csv",
    "quasar_20_100.csv"
]
quasar_df = pd.concat([pd.read_csv(f) for f in files], ignore_index=True)

# 🔹 Renk farkları hesapla
quasar_df['u-g'] = quasar_df['u'] - quasar_df['g']
quasar_df['g-r'] = quasar_df['g'] - quasar_df['r']
quasar_df['r-i'] = quasar_df['r'] - quasar_df['i']
quasar_df['i-z'] = quasar_df['i'] - quasar_df['z']

# 🔹 Modelin beklediği feature sırasını yükle
feature_order = joblib.load("feature_order.save")  # aynı sırayı sağlar
scaler = joblib.load("scaler.save")

# 🔹 Sadece gerekli sütunları al ve sıraya koy
quasar_df = quasar_df.dropna(subset=feature_order + ['redshift'])

X = quasar_df[feature_order]
z = quasar_df['redshift'].values
X_scaled = scaler.transform(X)

# 🔹 Modeli yükle
model = load_model("final_model_mu_shoes_redshift.h5", custom_objects={"mse": mse})

# 🔁 Binleme ve tahmin (0.01–7.00 arası)
bins = np.round(np.arange(0.01, 7.01, 0.01), 3)
bin_results = []

for center in tqdm(bins, desc="Tahmin ediliyor", unit="bin"):
    mask = np.abs(z - center) <= 0.004
    selected = X_scaled[mask]
    count = min(len(selected), 100)
    if count > 0:
        preds = model.predict(selected[:count], verbose=0).flatten()
        bin_results.append((center, np.mean(preds), count))
    else:
        bin_results.append((center, np.nan, 0))

bin_df = pd.DataFrame(bin_results, columns=["redshift", "MU_SHOES_pred", "count"])
bin_df.to_csv("quasar_mu_shoes_bin_predictions_fullrange.csv", index=False)

# 🌌 Pantheon+ verisi
pantheon_df = pd.read_excel("Pantheon+SH0ES_ml_nodup.xlsx")
pantheon_df = pantheon_df[['zCMB', 'MU_SH0ES']].dropna()
pantheon_df = pantheon_df.rename(columns={'zCMB': 'redshift', 'MU_SH0ES': 'mu_true'})


# 📈 Grafik
plt.figure(figsize=(14, 7))
bin_full = bin_df[bin_df['count'] == 100]
bin_partial = bin_df[(bin_df['count'] < 100) & (bin_df['count'] > 0)]

plt.scatter(bin_full['redshift'], bin_full['MU_SHOES_pred'], color='blue', label='Tahmin (100 quasar)', s=20)
plt.scatter(bin_partial['redshift'], bin_partial['MU_SHOES_pred'], color='black', label='Tahmin (<100 quasar)', s=20)
plt.scatter(pantheon_df['redshift'], pantheon_df['mu_true'], color='gray', alpha=0.25, label='Pantheon+ MU_SH0ES', s=15)

plt.xlabel("Redshift")
plt.ylabel("Distance Modulus (μ)")
plt.title("Quasar MU_SHOES Tahmini (0–7 Redshift Aralığı)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()