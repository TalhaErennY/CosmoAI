# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zfqctpdfG-90yb_NN0PFv8DGpqwzszs2
"""

# 📦 Kurulum (gerekiyorsa)
!pip install -q tensorflow scikit-learn matplotlib openpyxl

# 📚 Kütüphaneler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers import LeakyReLU
from tensorflow.keras.callbacks import EarlyStopping
from google.colab import files

df = pd.read_excel("quasar_filtered_zcmb_012_08_cleaned.xlsx")

df['u-g'] = df['u'] - df['g']
df['g-r'] = df['g'] - df['r']
df['r-i'] = df['r'] - df['i']
df['i-z'] = df['i'] - df['z']
z_plot = df['redshift'] #grafik için

features = ['u', 'g', 'r', 'i', 'z', 'u-g', 'g-r', 'r-i', 'i-z']
X = df[features]
y = df['MU_SH0ES']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
z_test = z_plot.loc[y_test.index].values

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = keras.Sequential([
    layers.Input(shape=(X.shape[1],)),
    layers.Dense(256, activation='tanh'),
    layers.BatchNormalization(),
    layers.Dense(256, activation='selu'),
    layers.BatchNormalization(),
    layers.Dense(128),
    LeakyReLU(alpha=0.1),
    layers.BatchNormalization(),
    layers.Dense(64, activation='selu'),
    layers.BatchNormalization(),
    layers.Dense(32, activation='tanh'),
    layers.BatchNormalization(),
    layers.Dense(1)
])

model.compile(optimizer=keras.optimizers.Adam(learning_rate=3e-4),
              loss='mse', metrics=['mse'])

early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# 🏋️ Eğitim
history = model.fit(X_train_scaled, y_train, validation_split=0.2, epochs=250, batch_size=32, callbacks=[early_stop], verbose=1)

y_pred = model.predict(X_test_scaled).flatten()
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
n, p = len(y_test), X_test.shape[1]
adjusted_r2 = 1 - (1 - r2) * (n - 1) / (n - p - 1)

print(f"🔹 Test MSE         : {mse:.4f}")
print(f"🔹 Test R²          : {r2:.4f}")
print(f"🔹 Adjusted R²      : {adjusted_r2:.4f}")

df_plot = pd.DataFrame({
    'redshift': z_test,
    'MU_SHOES_true': y_test.values,
    'MU_SHOES_pred': y_pred
})
df_plot['z_bin'] = (df_plot['redshift'] / 0.05).round(0) * 0.05
grouped = df_plot.groupby('z_bin').mean().reset_index()

plt.figure(figsize=(12, 6))
plt.plot(grouped['z_bin'], grouped['MU_SHOES_true'], 'o--', label='🔵 Gerçek MU_SHOES')
plt.plot(grouped['z_bin'], grouped['MU_SHOES_pred'], 'x-', label='🟠 Tahmin MU_SHOES')
plt.xlabel("Redshift")
plt.ylabel("Ortalama MU_SHOES")
plt.title("🔭 Redshift'e Göre Ortalama MU_SHOES (v5.1 Aktivasyon Odaklı, Z Girişi Yok)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()